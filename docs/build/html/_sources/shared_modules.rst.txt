.. _shared modules:

==========================
Modules shared with CLAP
==========================

.. _cluster module:

Cluster Module
-------------------

The cluster module allows CLAP to work with cluster, which is a set of CLAP's nodes tagged with a specific tag. A CLAP's cluster is created taking as input configuration files, in YAML format, which will create nodes and setup each of them properly. After created, the cluster can be resized (adding or removing nodes), paused, resumed, stopped, among other things.
By default, the CLAP's cluster module will find configurations inside ``~/clap/configs/clusters`` directory. At next sections, we will assume that files will be created inside this directory (in ``.yml`` format). 

The next section will guide you to write a cluster configuration and then, module's commands will be presented.

Cluster Configuration
++++++++++++++++++++++++++

To create a CLAP's cluster you will need to write:

- **Setup configuration sections**: which define a series of groups and actions that must be performed.
- **Cluster configuration sections**: which define a set of nodes that must be created and the setups that must be performed in each node.

Setups and cluster section may be written in multiple different files, as CLAP's cluster modules will read all files (and setups and clusters configurations, respectively) inside the cluster's directory.

.. note::

    Cluster's configuration files accepts `Jinja-like variables <https://jinja.palletsprojects.com>`_ that can be populated using ``--extra`` parameters at each cluster's commands. Any part of the configuration can use Jinja-like variables.

Setup Configuration Sections
+++++++++++++++++++++++++++++

Setup configuration sections define a series of groups and/or actions that must be performed cluster's nodes. An example of a setup configuration section is shown below.

.. code-block:: yaml

    # Setup configurations must be declared inside setups key
    setups: 

        # This is a setup configuration called setup-common
        setup-common:
            groups: 
            - name: commands-common     # Add nodes to commands-common group 
            - name: example-group       # Add nodes to example-group group 

            actions:
            - type: action              # Perform action update-packages from group commands-common at nodes
              name: update-packages
              group: commands-common

        # This is a setup configuration called setup-spits-jobmanager
        setup-spits-jobmanager:
            groups:
            - name: spits/jobmanager   # Add nodes to spits/jobmanager group 

        # This is a setup configuration called setup-spits-taskmanager
        setup-spits-taskmanager:
            groups:
            - name: spits/taskmanager   # Add nodes to spits/taskmanager group 

Setup configurations must be written inside ``setups`` YAML-dictionary. You can define as many setup configurations as you want, even at different files (since inside the ``setups`` YAML-dictionary), but each one must have a unique name.
Inside the ``setups`` section, each dictionary represents a setup configuration. The dictionary key (``setup-common``, ``setup-spits-jobmanager`` and ``setup-spits-taskmanager`` in above example) represent the setup configuration ID.

Each setup configuration may contain two dictionaries: ``groups`` and ``actions`` (both are optional). Both sections, for a setup configuration is described in the next two subsections.

Groups key at an setups configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The ``groups`` section inside a setup configuration tells to add nodes, which perform this setup, to the defined groups. The ``groups`` section contains a **list** describing each group that the nodes must be added. Also, the groups is always added in the order defined in the list.

Each element of the list must have a ``name`` key, which describe the name of the group that the node must be added.
For instance, the ``setup-common`` at above example, defines two groups which nodes that perform this setup must be added: ``commands-common`` and ``example-group`` (in this order).

Optionally an ``extra`` key can be defined by each group, as a dictionary. The key and values is passed as ``extra`` parameter to the ``group add`` module command.
For instance, the setup below, will add nodes that perform this setup (``setup-common-2``) to group ``example-group`` passing variables, ``foo`` and ``another_var`` with values ``bar`` and ``10``, respectively.

.. code-block:: yaml

    # Setup configurations must be declared inside setups key
    setups: 

        # This is a setup configuration called setup-common
        setup-common-2:
            groups: 
            - name: example-group     # Add nodes to example-group group
              extra:
                foo: bar
                another_var: 10


Actions key at an setups configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The ``actions`` section inside a setup configuration tells to perform actions at nodes which perform this setup. The ``actions`` section contains a **list** describing each action that must be performed (in order). Each element of the action list must have a type.
A type may have three values:

- **action**: will perform an group action. Thus, the ``group`` and ``name`` key must be informed. The ``group`` key will tell the name of the group and the ``name`` key will tell which action from that group which will be performed. Optionally, an ``extra`` dictionary can be informed to pass keyword variables to the group's action.
- **playbook**: will execute an Ansible Playbook. Thus, the ``path`` key must be informed, telling the absolute path of the playbook that will be executed. Optionally an ``extra`` dictionary can be informed to pass keyword variables to the playbook.
- **command**: will execute a shell command. Thus, the ``command`` key must be informed, telling which shell command must be executed.

Some action examples are briefly shown below:

.. code-block:: yaml

    # Setup configurations must be declared inside setups key
    setups: 

        # This is a setup configuration called setup-common. The actions are executed sequentially
        another-setup-example:
            actions: 
            
            # Perform mount action from group nfs-client, passing the variable mount_path with value /mnt
            - type: action
              name: mount 
              group: nfs-client
              extra:
                mount_path: /mnt
            
            # Execute the playbook /home/my-cool-ansible-playbook with an variable foo with value bar
            - type: playbook
              path: /home/my-cool-ansible-playbook
              extra:
                foo: bar

            # Execute a shell command: hostname
            - type: command
              command: hostname

            # Perform reboot action from commands-common group
            - type: action
              group: commands-common
              name: reboot

.. note:: 
    
    If a setup configuration contains both ``groups`` and ``actions`` sections, commands at ``groups`` section will **always** be executed before ``actions``.


Cluster Configuration Sections
++++++++++++++++++++++++++++++

The cluster configuration defines a set of nodes that must be created and setups that must be executed. Clusters are written inside ``clusters`` YAML-dictionary key and each dictionary inside ``clusters`` key denotes a cluster (where the dictionary key is the cluster's name). Above is an example of a cluster configuration:

.. code-block:: yaml

  # Clusters must be defined inside clusters key
  clusters:
    # This is the cluster name
    my-cool-cluster-1:  
      # Nodes that must be created when a cluster is instantiated  
      nodes:
        # Node named master-node
        master-node:
          type: aws-instance-t2.large   # Instance type that must be created (must match instances.yaml name)
          count: 1                      # Number of instances that must be created
          setups:                       # Optionally, list of setups to be executed when the master-nodes is created (reference setup configuration names, at setups section)
          - another-example-setup
          - master-setup
        
        # Node named taskmanager
        slave-nodes:
          type: aws-instance-t2.small  # Instance type that must be created (must match instances.yaml name)
          count: 2                     # Number of instances that must be created
          min_count: 1                 # Minimum desired number of instances that must effectively be created
          setups:                      # Optionally, list of setups to be executed when the slave-nodes is created
          - setup-slave-node

Clusters must have the ``nodes`` section, which defines the nodes that must be created when the cluster is instantiated. As example above, each cluster's node have a name (``master-node`` and ``slave-node``) and values, that specify the cluster's node characteristics. Each node may have the values listed in is table below.

..  list-table:: code-block:: none Cluster's nodes valid parameters
    :header-rows: 1

    *   - **Name**
        - **Type**
        - **Description**

    *   - ``type``
        - string
        - Instance type that must to be created. The type must match the node name at ``instances.yaml`` file

    *   - ``count``
        - Positive integer
        - Number of instances of this type to be launched
    
    *   - ``min_count`` (OPTIONAL)
        - Positive integer (less then or equal ``count`` parameter)
        - Minimum number of instances of this type that must effectively be launched. If this parameter is not supplied the value of ``count`` parameter is assumed

    *   - ``setups``
        - List of strings
        - List with the name of the setup configurations that must be executed after nodes are created

When a cluster is created, the instance types specified in the each node section is created with the desired ``count`` number. The cluster is considered created when all nodes are effectively created. The ``min_count`` parameter at each node specify the minimum number of instances of that type that must effectively be launched. If some instances could not be instantiated, with less than ``min_count`` parameter, the cluster creation process fails and all nodes are terminated.

After the cluster is created, i.e. the minimum number of nodes of each type is successfully created, the ``setups`` for each node is executed, in order. If some setup does not execute correctly, the cluster remains created and the ``setup`` phase can be executed again.

Controlling cluster's setups execution phases
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CLAP's cluster module also offers some other facilities to configure the cluster. By default the cluster module create nodes and run the setup from each node type. You can control the flow of the setup execution using some optional keys at your cluster configuration. The keys: ``before_all``, ``before``, ``after`` and ``after_all`` can be plugged into a cluster's configuration, in order to execute setups in different set of nodes, before and after the nodes setups. These keys takes a list of setups to execute.
CLAP's setup phases are executed in the order, as shown in table bellow.


..  list-table:: code-block:: none Cluster's setups execution phases (in order)
    :header-rows: 1

    *   - **Phase name**
        - **Description**

    *   - ``before_all``
        - Setups inside this key are executed in all cluster's nodes before specific setup of the nodes.

    *   - ``before``
        - Setups inside this key are executed only in nodes that are currently being added to the cluster, before the setup specific setup of the nodes. Its useful when resizing cluster, i.e., adding more nodes. This phase is always executed at cluster creation, as all created nodes are being added to the cluster.

    *   - ``node``
        - The setup for each node is executed, for the nodes that are being added to the cluster

    *   - ``after``
        - Setups inside this key are executed only in nodes that are currently being added to the cluster, after the setup specific setup of the nodes. Its useful when resizing cluster, i.e., adding more nodes. This phase is always executed at cluster creation, as all created nodes are being added to the cluster.

    *   - ``after_all``
        - Setups inside this key are executed in all cluster's nodes after specific setup of the nodes.

.. note:: 

  All setups are executed after the nodes are created and are all optional


An example is shown below:

.. code-block:: yaml

  # Clusters must be defined inside clusters key
  clusters:
    # This is the cluster name
    my-cool-cluster-1:  
      # These setups are executed at all cluster's nodes, before setups at nodes section
      before_all:
      - my-custom-setup-1

      # These setups are executed at nodes that are currently being added to cluster, before setups at nodes section
      before:
      - my-custom-setup-2

      # These setups are executed at nodes that are currently being added to cluster, after setups at nodes section
      after:
      - my-custom-setup-3
      - my-custom-setup-4

      # These setups are executed at all cluster's nodes, after setups at nodes section
      after_all:
      - final_setup

      # Nodes that must be created when a cluster is instantiated 
      nodes:
        # Node named master-node
        master-node:
          type: aws-instance-t2.large   # Instance type that must be created (must match instances.yaml name)
          count: 1                      # Number of instances that must be created
          setups:                       # Optionally, list of setups to be executed when the master-nodes is created (reference setup configuration names, at setups section)
          - another-example-setup
          - master-setup
        
        # Node named taskmanager
        slave-nodes:
          type: aws-instance-t2.small  # Instance type that must be created (must match instances.yaml name)
          count: 2                     # Number of instances that must be created
          min_count: 1                 # Minimum desired number of instances that must effectively be created
          setups:                      # Optionally, list of setups to be executed when the slave-nodes is created
          - setup-slave-node


In the above example, supposing you are creating a new cluster, thus after 1 ``master-node`` and 2 ``slave-nodes`` were created, the following setups are executed (in order):

- ``before_all`` setups: ``my-custom-setup-1`` at all nodes
- ``before`` setups: ``my-custom-setup-2`` at all nodes
- ``nodes`` setups (not necessary in order): ``another-example-setup``and ``master-setup`` at ``master-nodes`` nodes and ``setup-slave-node`` at ``slave-nodes`` nodes.
- ``after`` setups: ``my-custom-setup-3`` and ``my-custom-setup-4`` at all nodes
- ``after_all`` setups: ``final_setup`` at all nodes
    
Now supposing you are resizing the already created cluster (adding more ``slave-nodes`` to it), the ``before_all`` and ``after_all`` setups will be executed in all cluster's nodes (including the new ones, that are being added) and ``before``, ``nodes`` and ``after`` phase setups will only be executed at nodes that are being added to the the cluster.

Other cluster's setups optional keys
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The ``options`` key can be plugged at a cluster configuration allowing some special options to cluster. The ``options`` key may have the following parameters:

..  list-table:: code-block:: none Cluster's options keys
    :header-rows: 1

    *   - **Option name**
        - **Description**

    *   - ``ssh_to``
        - Connect to a specific node when performing the ``cluster connect`` command

A example is shown below:

.. code-block:: yaml

  # Clusters must be defined inside clusters key
  clusters:
    # This is the cluster name
    my-cool-cluster-1:  
      # Additional cluster's options (optional)
      options:
        # When connecting to a cluster, connect to a master-node 
        ssh_to: master-node

      # Nodes that must be created when a cluster is instantiated  
      nodes:
        # Node named master-node
        master-node:
          type: aws-instance-t2.large   # Instance type that must be created (must match instances.yaml name)
          count: 1                      # Number of instances that must be created
          setups:                       # Optionally, list of setups to be executed when the master-nodes is created (reference setup configuration names, at setups section)
          - another-example-setup
          - master-setup
        
        # Node named taskmanager
        slave-nodes:
          type: aws-instance-t2.small  # Instance type that must be created (must match instances.yaml name)
          count: 2                     # Number of instances that must be created
          min_count: 1                 # Minimum desired number of instances that must effectively be created
          setups:                      # Optionally, list of setups to be executed when the slave-nodes is created
          - setup-slave-node


Command ``cluster start``
++++++++++++++++++++++++++

Start a cluster given a cluster configuration name.

.. code-block:: none

  clapp cluster start [-h] [--file FILE] [--directory DIRECTORY] [--no-setup] [--extra ...] cluster_name
