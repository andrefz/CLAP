:mod:`clap.app.serverapp.interfaces.node`
=========================================

.. py:module:: clap.app.serverapp.interfaces.node


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   interface/index.rst


Package Contents
----------------


.. py:class:: PlatformFactory

   Class used to create common CLAP interfaces used
       

   .. attribute:: __multi_instance_api__
      

      

   .. attribute:: __module_iface__
      

      

   .. method:: get_module_interface()
      :staticmethod:


      Get the default ModuleInterface used to pick clap modules

      :return: The modules interface
      :rtype: ModuleInterface


   .. method:: get_instance_api(platform_db: str = Defaults.PLATFORM_REPOSITORY, repository_type: str = Defaults.REPOSITORY_TYPE, default_driver: str = Defaults.DRIVER_ID)
      :staticmethod:


      Get the default MultiInstance API used to manipulate nodes and modules across different drivers

      :return: The MultiInstanceAPI object to manipulate nodes and modules
      :rtype: MultiInstanceAPI



.. py:class:: NodeInfo(**kwargs)

   Bases: :class:`clap.common.repository.AbstractEntry`

   This class holds information about a node that is stored in the CLAP's repository and used by several interfaces
   Each node is unique and is composed by the following elements:
       * node_id: The unique identification of the node, used to perform operations across modules and interfaces
       * cluster_id: ID of the cluster that this node is attached to. The cluster defines a unique login and provider configurations.
       * instance_type: Type of the instantiated node (equivalent to the instances configuration file)
       * creation_time: Date of node's creation
       * update_time: Date of the last node's update
       * ip: IP address used to connect to this node (address used to perform SSH)
       * status: Last known status of the node (see PlatformCodes)
       * tags: Dictionary of tags for node identification. The key is the tag name and the value is a set of tag values
       * groups: Dictionary with groups which the nodes belongs to. The key is the group name and the value is additional group's information.
       * driver_id: ID of the in-use driver that controls this node
       * instance_id: ID of the instance at the cloud provider (cloud's instance id)
       * lifecycle: Instance lifecycle. It can be 'spot' or 'on-demand'
       * extra: Additional instance information

   .. method:: __repr__(self)




.. py:class:: Defaults

   Default values used in CLAP system. This is a class is global and changes in its values affects all places that uses it
       

   .. attribute:: verbosity
      :annotation: = 0

      Log level for logging operations (based on logging package) 


   .. attribute:: log_level
      

      Default symbolic application name 


   .. attribute:: app_name
      :annotation: = CLAP

      Default repository implementation used 


   .. attribute:: REPOSITORY_TYPE
      :annotation: = tinydb

      Default driver implementation used 


   .. attribute:: DRIVER_ID
      :annotation: = ansible

      Default repository type used 


   .. attribute:: DEFAULT_CONF_TYPE
      :annotation: = json

      Path to configuration files 


   .. attribute:: configs_path
      

      Path to private files 


   .. attribute:: private_path
      

      Path to storage, where metadata information is placed 


   .. attribute:: storage_path
      

      Path to groups directory 


   .. attribute:: groups_path
      

      Path to group's actions directory 


   .. attribute:: actions_path
      

      Path to additional CLAP's modules directory 


   .. attribute:: modules_path
      

      Path to CLAP's modules metadata storage path 


   .. attribute:: modules_data
      

      NOT USED 


   .. attribute:: elasticluster_storage_path
      

      Default path to provider configuration file 


   .. attribute:: cloud_conf
      

      Default path to login configuration file 


   .. attribute:: login_conf
      

      Default path to instances configuration file 


   .. attribute:: instances_conf
      

      Default path to platform configuration file 


   .. attribute:: PLATFORM_REPOSITORY
      

      


.. function:: __get_module__(name, **kwargs)


.. function:: get_navigation_html()


.. function:: node_index()


.. function:: get_node_templates()


.. function:: get_node_list()


.. data:: __module_name__
   :annotation: = Node

   

.. data:: __module_description__
   :annotation: = Create and manages nodes at different clouds

   

.. data:: __register__
   

   

.. data:: __routes__
   :annotation: = [None, None, None, None]

   

