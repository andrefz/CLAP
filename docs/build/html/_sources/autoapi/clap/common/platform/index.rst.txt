:mod:`clap.common.platform`
===========================

.. py:module:: clap.common.platform


Module Contents
---------------

.. py:class:: ModuleInterface

   Interface to get clap modules from the modules repository
       

   .. attribute:: __modules_map__
      

      

   .. method:: __find_modules()
      :staticmethod:



   .. method:: get_module_obj(self, module_name: str)


      Get the module package

      :param module_name: Name of the clap module
      :type module_name: str
      :return: The module
      :rtype: Module


   .. method:: get_modules(self)


      Get the name of all the modules in the clap modules repository

      :return: List containing the module names
      :rtype: List[str]



.. py:class:: MultiInstanceAPI(platform_db: str, repository_type: str, default_driver: str)

   API used to manage and perform operations in cluster and nodes from different driver implementations,
   and cloud providers in a transparently manner.

   .. attribute:: __drivers_map__
      

      

   .. attribute:: __interfaces_map__
      

      

   .. method:: __find_ifaces()
      :staticmethod:



   .. method:: _get_instance_iface(self, driver_id: str = None)



   .. method:: create_cluster(self, cluster_template_path: str, driver_id: str = None, *args, **kwargs)



   .. method:: stop_cluster(self, cluster_id: str, *args, **kwargs)



   .. method:: start_nodes(self, cluster_id: str, *args, **kwargs)



   .. method:: stop_nodes(self, node_ids: List[str], *args, **kwargs)



   .. method:: check_nodes_alive(self, node_ids: List[str], *args, **kwargs)



   .. method:: execute_playbook_in_nodes(self, node_ids: List[str], playbook_path: str, *args, **kwargs)



   .. method:: get_connection_to_nodes(self, node_ids: List[str], *args, **kwargs)



   .. method:: get_cluster(self, cluster_id: str)



   .. method:: get_clusters(self, cluster_ids: List[str] = None)



   .. method:: get_clusters_by_tag(self, **tags)



   .. method:: get_node(self, node_id: str)



   .. method:: get_nodes(self, node_ids: List[str] = None)



   .. method:: get_nodes_from_cluster(self, cluster_id: str)




