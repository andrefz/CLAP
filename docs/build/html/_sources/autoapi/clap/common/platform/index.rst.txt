:mod:`clap.common.platform`
===========================

.. py:module:: clap.common.platform


Module Contents
---------------

.. py:class:: ModuleInterface

   Interface to get clap modules from the modules repository
       

   .. attribute:: __modules_map__
      

      

   .. method:: __find_modules()
      :staticmethod:



   .. method:: get_module(self, module_name: str)


      Get the module package

      :param module_name: Name of the clap module
      :type module_name: str
      :return: The module
      :rtype: Module


   .. method:: get_modules(self)


      Get the module package

      :return: List of modules
      :rtype: List[module]


   .. method:: get_module_names(self)


      Get the name of all the modules in the clap modules repository

      :return: List containing the module names
      :rtype: List[str]



.. py:class:: GroupInterface

   .. attribute:: __groups_actions_map__
      

      

   .. attribute:: GROUP_SCHEMA
      

      

   .. method:: __find_groups()
      :staticmethod:



   .. method:: get_group(self, group_name: str)



   .. method:: get_group_names(self)




.. py:class:: MultiInstanceAPI(platform_db: str, repository_type: str, default_driver: str)

   API used to manage and perform operations in cluster and nodes from different driver implementations,
   and cloud providers in a transparently manner.

   .. attribute:: __interfaces_map__
      

      

   .. method:: __find_ifaces()
      :staticmethod:



   .. method:: _get_instance_iface(self, driver_id: str = None)



   .. method:: start_nodes(self, instances_num: Dict[str, int])



   .. method:: stop_nodes(self, node_ids: List[str])



   .. method:: check_nodes_alive(self, node_ids: List[str])



   .. method:: execute_playbook_in_nodes(self, playbook_path: str, hosts: Union[List[str], Dict[str, List[str]]], extra_args: Dict[str, str] = ())



   .. method:: get_connection_to_nodes(self, node_ids: List[str], *args, **kwargs)



   .. method:: get_node(self, node_id: str)



   .. method:: get_nodes(self, node_ids: List[str] = None)



   .. method:: get_nodes_with_tags(self, tags: Dict[str, str])



   .. method:: add_tags_to_nodes(self, node_ids: List[str], tags: Dict[str, str])



   .. method:: remove_tags_from_nodes(self, node_ids: List[str], tags: List[str])



   .. method:: get_groups(self)



   .. method:: __execute_group_action_sequence(self, hosts: Dict[str, List[str]], actions: List[str], group_path: str, extra_args: Dict[str, str], error_action: str = 'error')



   .. method:: __check_nodes_in_group(self, group: str, node_ids: List[str] = None)



   .. method:: add_nodes_to_group(self, node_ids: List[str], group_name: str, group_args: Dict = None, error_action: str = 'error')



   .. method:: __add_nodes_to_group(self, group_hosts_map: Dict[str, Union[List[str], Dict[str, List[str]]]], group_args: Dict = None, error_action: str = 'error')



   .. method:: execute_group_action(self, group_name: str, action: str, group_args: Dict = None, node_ids: List[str] = None, error_action='ignore')



   .. method:: __execute_group_action(self, node_ids: List[str], group_name: str, action: str, group_args: Dict = None, error_action='error')



   .. method:: remove_nodes_from_group(self, group_name: str, node_ids: List[str] = None, remove_action: str = None, group_args: Dict = None)




