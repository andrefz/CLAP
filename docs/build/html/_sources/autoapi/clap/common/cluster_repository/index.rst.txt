:mod:`clap.common.cluster_repository`
=====================================

.. py:module:: clap.common.cluster_repository


Module Contents
---------------


.. py:class:: PlatformControlInfo(*args, **kwargs)

   Bases: :class:`clap.common.repository.AbstractEntry`

   This class holds control information used to create nodes and cluster in the repository (database).
   It holds an **incremental index** to be used to create such elements.


.. py:class:: ClusterInfo(**kwargs)

   Bases: :class:`clap.common.repository.AbstractEntry`

   This class holds information about a cluster. A cluster is considered a set of nodes with the same provider and login configurations
   Each cluster is unique and is composed by the following elements:
       * cluster_id: The unique identification of the cluster, used to perform operations across modules and instance interfaces (auto-generated)
       * provider_id: Id of the provider configuration used
       * login_id: Id of the login configuration used 
       * driver_id: Id of the driver in-use
       * creation_time: Date of cluster's creation
       * extra: Optional extra information

   .. method:: __repr__(self)




.. py:class:: NodeInfo(**kwargs)

   Bases: :class:`clap.common.repository.AbstractEntry`

   This class holds information about a node that is stored in the CLAP's repository and used by several interfaces
   Each node is unique and is composed by the following elements:
       * node_id: The unique identification of the node, used to perform operations across modules and interfaces
       * cluster_id: ID of the cluster that this node is attached to. The cluster defines a unique login and provider configurations.
       * instance_type: Type of the instantiated node (equivalent to the instances configuration file)
       * creation_time: Date of node's creation
       * update_time: Date of the last node's update
       * ip: IP address used to connect to this node (address used to perform SSH)
       * status: Last known status of the node (see PlatformCodes)
       * tags: Dictionary of tags for node identification. The key is the tag name and the value is a set of tag values
       * groups: Dictionary with groups which the nodes belongs to. The key is the group name and the value is additional group's information.
       * driver_id: ID of the in-use driver that controls this node
       * instance_id: ID of the instance at the cloud provider (cloud's instance id)
       * lifecycle: Instance lifecycle. It can be 'spot' or 'on-demand'
       * extra: Additional instance information

   .. method:: __repr__(self)




.. py:class:: RepositoryOperations(platform_repository: str, repository_type: str, node_prefix='node')

   .. method:: _get_platform_repository(self)


      Get the platform repository connection

      :return: The platform database connection
      :rtype: AbstractRepository


   .. method:: exists_platform_db(self)


      Check if the platform database exists

      :return: A boolean representing the existence of the platform database
      :rtype: bool


   .. method:: create_platform_db(self, exists: str = 'pass')


      Creates the platform Database

      :param exists: This parameter can be:
      * 'pass' (default): will do nothing if the platform database tables already exists
      * 'fail': will raise `TableAlreadyExists` exception
      * 'overwrite': will drop and create a new table, if it already exists
      :return: A open repository connection
      :rtype: AbstractRepository


   .. method:: new_cluster(self, cluster_id: str, provider_id: str, login_id: str, driver_id: str, extra: dict = None)


      Create a new cluster in the repository

      :param cluster_id: ID of the cluster to create (usually driver_id-provider_id-login_id)
      :type cluster_id: str
      :param provider_id: Name of the provider configuration (must match the provider ID in the provider's configuration file)
      :type provider_id: str
      :param login_id: Name of the login configuration (must match the login ID in the login's configuration file)
      :type login_id: str
      :param driver_id: ID of the in-use driver
      :type driver_id: str
      :param extra: Additional extra parameters to cluster
      :type extra: dict
      :return: A new created cluster in the repository
      :rtype: ClusterInfo


   .. method:: new_node(self, cluster_id: str, instance_type: str, status: str, driver_id: str, ip: str = None, instance_id: str = None, tags: dict = None, groups: dict = None, extra: dict = None, lifecycle: str = 'on-demand')


      Create a new node in the repository

      :param cluster_id: Cluster which the node will be associated
      :type cluster_id: str
      :param instance_type: Type of the instance to be created (must match the instance ID from the instance configuration file)
      :type instance_type: str
      :param status: Status of the node (see PlatformCodes)
      :type status: str
      :param driver_id: ID of the in-use driver
      :type driver_id: str
      :param ip: IP of the node
      :type ip: str
      :param instance_id: ID of the instance from the provider
      :type instance_id: str
      :param tags: Additional tags from instance
      :type tags: dict
      :param groups: Groups which the nodes belong to. It is a dictionary, keys are group names and values are optional groups additional variables
      :type groups: dict
      :param extra: Additional extra parameters to the node
      :type extra: dict
      :param lifecycle: Cloud's instance lifecycle. On-demand or spot
      :type lifecycle: str
      :return: A new created node in the repository
      :rtype: NodeInfo


   .. method:: update_cluster(self, cluster: ClusterInfo)


      Update a cluster information in the repository

      :param cluster: The cluster infromation to be updated
      :type cluster: ClusterInfo


   .. method:: update_node(self, node: NodeInfo)


      Update a node information in the repository

      :param cluster: The node infromation to be updated
      :type cluster: NodeInfo


   .. method:: get_clusters(self, cluster_ids: Union[str, List[str]])


      Given a list with cluster ids, it returns all the Cluster Information that matches the Ids in the repository

      :param cluster_ids: List of cluster ids to be queried
      :type cluster_ids: List[str]
      :return: Matched cluster information
      :rtype: List[ClusterInfo]


   .. method:: get_all_clusters(self)


      Get the information of all created cluster in the repository

      :return: List with the information of all created cluster
      :rtype: List[ClusterInfo]


   .. method:: get_nodes(self, node_ids: Union[str, List[str]])


      Given a list with node ids, it returns all the Node Information that matches the ids in the repository

      :param node_ids: List of node ids to be queried
      :type node_ids: List[str]
      :return: Matched nodes information
      :rtype: List[NodeInfo]


   .. method:: get_all_nodes(self)


      Get the information of all created nodes in the repository

      :return: List with the information of all created nodes
      :rtype: List[NodeInfo]


   .. method:: get_nodes_from_cluster(self, cluster_id: str)


      Given a list of cluster ids, return all nodes in cluster that matches the ids passed in the repository

      :param cluster_id: Id of the cluster
      :type cluster_id: str
      :return: All the nodes that matches the cluster ids passed
      :rtype: List[NodeInfo]


   .. method:: remove_cluster(self, cluster_id: str)


      Remove a cluster from repository based on it's ID

      :param cluster_id: ID of the cluster to be removed
      :type cluster_id: str


   .. method:: remove_node(self, node_id: str)


      Remove a node from repository based on it's ID

      :param node_id: ID of the node to be removed
      :type node_id: str



