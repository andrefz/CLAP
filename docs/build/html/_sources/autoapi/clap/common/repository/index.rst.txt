:mod:`clap.common.repository`
=============================

.. py:module:: clap.common.repository


Module Contents
---------------


.. py:class:: AbstractEntry(*args, **kwargs)

   Bases: :class:`clap.common.utils.Struct`

   This class represent a single entry in the Repository. Basically its a dictionary that is a serializable and
   is a generic container for a data format. Implementations derived from this class represent specific element types in a repository.
   Objects (variables) inside this class can be accessed using `element['variable']` or `element.variable` notations


.. py:class:: AbstractRepository(repository: str, create_repository: bool, storage_type: str = None, *args, **kwargs)

   Base class for implementing repositories and their operations. The repository is similar to tabled data models.
   The elements are every object inherited from ``AbstractEntry`` class, which are basically, dictionary types.
   Tables hold a set of elements of the same type and must be created before adding elements.
   The repository then, implement a set of methods to create, retrieve, update and delete elements and tables from the database.

   .. attribute:: __repository_id__
      :annotation: = abstractrepository

      

   .. attribute:: __repository_name__
      :annotation: = Abstract Repository

      

   .. attribute:: __repository_version__
      :annotation: = 0.0.1

      

   .. method:: open_connection(self, *args, **kwargs)
      :abstractmethod:



   .. method:: close_connection(self, *args, **kwargs)
      :abstractmethod:



   .. method:: create_table(self, table: str, *args, **kwargs)
      :abstractmethod:


      Create a table in the repository  (a container to hold elements of the same type)

      :param table: Name of the table to be created
      :type table: str
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: None


   .. method:: retrieve_tables(self)
      :abstractmethod:


      Retrieve tables from the repository.

      :return: List with the table names
      :rtype: List[str]


   .. method:: exists_table(self, table: str, *args, **kwargs)
      :abstractmethod:


      Check if a table exists in the repsitory

      :param table: Name of the table to be checked
      :type table: str
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: True if table exists and False otherwise
      :rtype: bool


   .. method:: drop_tables(self, tables: List[str], *args, **kwargs)
      :abstractmethod:


      Delete tables from the repository

      :param tables: Name of the tables to delete
      :type tables: List[str]
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: None


   .. method:: create_element(self, table: str, obj: AbstractEntry, *args, **kwargs)
      :abstractmethod:


      Insert a new element in the table

      :param table: Name of the table to create the entry
      :type table: str
      :param obj: Entry to be inserted, class derived from ``AbstractEntry``
      :type obj: AbstractEntry
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: None


   .. method:: retrieve_elements(self, table: str, cast_to: type, **where)
      :abstractmethod:


      Retrieve elements from a table in the database, basing on a simle keyworded query

      :param table: Name of the table to retrieve the elements
      :type table: str
      :param cast_to: Type to cast the elements after retrieval from the database (Derived from ``AbstractEntry`)
      :type cast_to: type
      :param where: Keyworded clauses which specify conditions, the key is he field name (from the entry) and value is the data associated.
          Elements that match the conditions will be retrieved (e.g. person_id='person1')
      :type where: Dict[str,Any]
      :return: List of the elements that matches the creteria
      :rtype: List[Any]


   .. method:: update_element(self, table: str, obj: AbstractEntry, **where)
      :abstractmethod:


      Update an element from the database table with another one, matching a criteria

      :param table: Name of the table do modify the element
      :type table: str
      :param obj: New element to be inserted (Derived from ``AbstractEntry`)
      :type obj: AbstractEntry
      :param where: Keyworded clauses which specify conditions, the key is he field name (from the entry) and value is the data associated.
          Elements that match the conditions will be retrieved (e.g. person_id='person1')
      :type where: Dict[str,Any]
      :return: None


   .. method:: drop_elements(self, table: str, **where)
      :abstractmethod:


      Delete elements from a database table that matches a criteria

      :param table: Name of the table that elements will be deleted
      :type table: str
      :param where:
      :param where: Keyworded clauses which specify conditions, the key is he field name (from the entry) and value is the data associated.
          Elements that match the conditions will be retrieved (e.g. person_id='person1')
      :type where: Dict[str,Any]
      :return: None



.. py:class:: TinyDBRepository(repository_path: str, create_repository: bool, storage_type: str = DEFAULT_STORAGE_TYPE, *args, **kwargs)

   Bases: :class:`clap.common.repository.AbstractRepository`

   Repository implementation using the tinydb, document-oriented database.
       

   .. attribute:: __repository_id__
      :annotation: = tinydb

      

   .. attribute:: __repository_name__
      :annotation: = TinyDB Repository

      

   .. attribute:: __repository_version__
      :annotation: = 0.1.0

      

   .. attribute:: DEFAULT_STORAGE_TYPE
      :annotation: = json

      

   .. attribute:: __storage_types_map
      

      

   .. method:: open_connection(self, *args, **kwargs)



   .. method:: close_connection(self, *args, **kwargs)



   .. method:: create_table(self, table: str, *args, **kwargs)


      Create a new table in the database

      :param table: Name of the table to be created
      :type table:  str
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: None
      :raises TableAlreadyExists: if a table with the same name already exists in the database


   .. method:: retrieve_tables(self)


      Get the names of all tables in the database

      :return: List with the table names
      :rtype: List[str]


   .. method:: exists_table(self, table: str, *args, **kwargs)


      Check if a table already exists in database

      :param table: Name of the table
      :type table: str
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: True if the table exists, False otherwise
      :rtype: bool


   .. method:: drop_tables(self, tables: List[str], *args, **kwargs)


      Delete tables from the database

      :param tables: Names of the tables to be removed
      :type tables: List[str]
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: None


   .. method:: create_element(self, table: str, obj: AbstractEntry, *args, **kwargs)


      Insert elements in a database table

      :param table: Name of the table to insert the element
      :type table: str
      :param obj: Element to be inserted (derived from ``AbstractEntry``)
      :type obj: AbstractEntry
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: None
      :raises ValueError: If table name is invalid


   .. method:: retrieve_elements(self, table: str, cast_to: type = dict, **where)


      Retrieve elements from the database that match a criteria

      :param table: Name of the table to retrieve the elements
      :type table: str
      :param cast_to: Type that the elements will be casted after retrieved (derived from ``AbstractEntry``)
      :type cast_to: type
      :param where: Keyworded clauses which specify conditions. The key is the field name (from the entry) and value is the data associated.
          Elements that match the conditions will be retrieved (e.g. person_id='person1').
          If no conditions are passed all elements are retrieved
      :type where: Dict[str,Any]
      :return: List with the elements retrieved, properly casted to the type passed
      :rtype: List[Any]
      :raises ValueError: If table name is invalid


   .. method:: update_element(self, table: str, obj: AbstractEntry, **where)


      Update an element (or elements) matching some creiterias, replacing it with another one.

      :param table: Name of the table that the element will be updated
      :type table: str
      :param obj: Entry to be inserted (derived from ``AbstractEntry``)
      :type obj: AbstractEntry
      :param where: Keyworded clauses which specify conditions. The key is the field name (from the entry) and value is the data associated.
          Elements that match the conditions will be retrieved (e.g. person_id='person1').
          If no conditions are the first retrived element in the table will be updated
      :return: None
      :raises ValueError: If table name is invalid


   .. method:: drop_elements(self, table: str, **where)


      Remove elements from a table

      :param table: Name of the table that the elements will be removed
      :type table: str
      :param where: Keyworded clauses which specify conditions. The key is the field name (from the entry) and value is the data associated.
          Elements that match the conditions will be retrieved (e.g. person_id='person1').
          A clause must be specified!
      :return:
      :raises ValueError: If table name is invalid



.. function:: generic_read_entry(info_type: type, repository: AbstractRepository, table: str, **where) -> list

   Helper method to read an entry from a repository

   :param info_type: Type of the entry that will be read. The type of the element must derive from AbstractDescriptorEntry
   :type info_type: AbstractEntry
   :param repository: Repository object used to read the element from
   :type repository: AbstractRepository
   :param table: Table of the repository where the element will be retrieved
   :type table: str
   :param where: The clauses to be matched when searching an entry
   :type where: Dict[Any, Any]
   :return: List of elements matching the criteria passed. The elements are all converted to `info_type` argument type
   :rtype: list


.. function:: generic_write_entry(info: AbstractEntry, repository: AbstractRepository, table: str, create: bool = False, **where)

   Helper method to write an entry in a repository

   :param info: Information to be written in repository (derived from AbstractDescriptorEntry class)
   :type info: AbstractEntry
   :param repository: Repository object used to write the element to
   :type repository: AbstractRepository
   :param table: Table of the repository where the element will be created/updated
   :type table: str
   :param create: If true it will create a element in the repository and if false, it will update. If the repository implementation supports insertion upon update, the element will be created when updating, else an exception will be raised
   :type create: bool
   :param where: The clauses to be matched when updating an entry
   :type where: Dict[Any, Any]


.. function:: check_and_create_table(repository: AbstractRepository, table_name: str, exists: str) -> bool

   Check if table exists and creates table based on `exists` variable policy. The table is always created if it does not exists

   :param repository: Repository that the table will be created
   :type repository: AbstractRepository
   :param table_name: Name of the table to be created
   :type table_name: str
   :param exists: Policy taken when the table already exists. This parameter can be:
       'pass' (default): will do nothing
       'fail': will raise `TableAlreadyExists` exception
       'overwrite': will drop the old table and create a new table
   :return: True indicating if the a new table was created, False otherwise
   :rtype: bool
   :raises:
   TableAlreadyExists
       If table already exists and 'fail' parameter is passed
   ValueError
       If exists parameter is invalid


.. function:: get_repository_connection(repository: AbstractRepository, *args, **kwargs)

   Estabilishes and get an open connection to a repository, using Python's `with` statement 

   :param repository: Repository to get a connection
   :type repository: AbstractRepository

   :return: An open repository connection 
   :rtype: AbstractRepository


.. py:class:: RepositoryFactory

   .. method:: get_repository(repository: str, repository_type: str = Defaults.REPOSITORY_TYPE, storage_type: str = None, create_new: bool = True)
      :staticmethod:


      Get a repository, based on a implementation of the ``AbstractRepository`` class.

      :param repository: Name of the repository to get
      :type repository: str
      :param repository_type: Repository implementation type (default is ``tinydb`` repository imlpementation)
      :type repository_type: str
      :param storage_type: Type of the storage (default is json)
      :type storage_type: str
      :param create_new: True to create a new repository (overwriting an existent one), false otherwise (default is True)
      :type create_new: bool
      :return: The repository in the specified implementation (derived from ``AbstractRepository``)
      :rtype: AbstractRepository
      :raises ValueError: If the repository implementation type is invalid


   .. method:: exists_repository(repository: str, repository_type=Defaults.REPOSITORY_TYPE)
      :staticmethod:


      Check if a repository already exists

      :param repository: Name of the repository
      :type repository: str
      :param repository_type: Repository implementation type (default is ``tinydb`` repository imlpementation)
      :type repository_type: str
      :return: True of the repository already exists and false otherwise
      :rtype: bool
      :raises ValueError: If the repository implementation type is invalid



