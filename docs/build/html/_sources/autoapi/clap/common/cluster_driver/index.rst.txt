:mod:`clap.common.cluster_driver`
=================================

.. py:module:: clap.common.cluster_driver


Module Contents
---------------

.. py:class:: AbstractClusterDriver(*args, **kwargs)

   Abstract class for implementing a cloud driver. The driver is responsible for managing clusters and nodes
   and performing operations in the nodes. Also, the driver may manage its own objects (in its own repository)
   which may refer to its cluster and nodes.

   .. attribute:: __driver_id__
      :annotation: = DriverID

      

   .. attribute:: __driver_name__
      :annotation: = Cluster Driver

      

   .. attribute:: __driver_version__
      :annotation: = 0.1.0

      

   .. method:: id(self)


      Get the driver ID

      :return: Driver's ID
      :rtype: str


   .. method:: name(self)


      Get the symbolic name of the driver

      :return: Driver's name
      :rtype: str


   .. method:: version(self)


      Get the version of the driver

      :return: Driver's version
      :rtype: str


   .. method:: __repr__(self)


      Representative driver object string

      :return: Driver string
      :rtype: str


   .. method:: __str__(self)



   .. method:: get_all_clusters(self)
      :abstractmethod:


      Get all clusters in the driver's cluster repository

      :return: List of cluster names
      :rtype: List[str]


   .. method:: exist_cluster(self, cluster_name: str)
      :abstractmethod:


      Check if a cluster exists in the driver's cluster repository, given its name.

      :param cluster_name: Name of the cluster to query
      :type cluster_name: str
      :return: True if cluster exists, false otherwise
      :rtype: bool


   .. method:: create_cluster(self, cluster_name: str, config_path: str, *args, **kwargs)
      :abstractmethod:


      Create a new cluster based on a given cluster template

      :param cluster_name: Name of the cluster to be created
      :type cluster_name: str
      :param config_path: Path to the cluster's configuration file
      :type config_path: str
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: The return type depends on the driver implementation
      :rtype: Any


   .. method:: remove_cluster(self, cluster_name: str, *args, **kwargs)
      :abstractmethod:


      Delete an instantiated cluster, given its name

      :param cluster_name: Name of the cluster to be removed
      :type cluster_name: str
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: True if the cluster was successfully removed and False otherwise
      :rtype: bool


   .. method:: stop_cluster(self, cluster_name: str, *args, **kwargs)
      :abstractmethod:


      Stop an instantiated cluster, given its name

      :param cluster_name: Name of the cluster to be stopped
      :type cluster_name: str
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: None


   .. method:: get_nodes_from_cluster(self, cluster_name: str, *args, **kwargs)
      :abstractmethod:


      Get all the nodes in the cluster, given its name

      :param cluster_name: Name of the cluster to get the nodes
      :type cluster_name: str
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: List of the node names
      :rtype: List[str]


   .. method:: get_cluster_of_node(self, node_name: str)
      :abstractmethod:


      Get the cluster belonging to a node

      :param node_name Name of the node to be found in a cluster
      :type node_name: str
      :return: The cluster name
      :rtype: str


   .. method:: start_nodes(self, cluster_name: str, *args, **kwargs)
      :abstractmethod:


      Starts (instantiates) nodes in an instantiated cluster, given its name

      :param cluster_name: Name of the cluster to start (instantiate) nodes
      :type cluster_name: str
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: List of the created nodes
      :rtype: List[Any]


   .. method:: stop_nodes(self, cluster_name: str, nodes: List[str], *args, **kwargs)
      :abstractmethod:


      Stop the nodes of an instantiated cluster

      :param cluster_name: Name of the cluster containing the nodes
      :type cluster_name: str
      :param nodes: Name of the cluster nodes to be stopped
      :type nodes: List[str]
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: None


   .. method:: pause_nodes(self, cluster_name: str, nodes: List[str], *args, **kwargs)
      :abstractmethod:


      Pause the nodes of an instantiated cluster

      :param cluster_name: Name of the cluster containing the nodes
      :type cluster_name: str
      :param nodes: Name of the cluster nodes to be paused
      :type nodes: List[str]
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: None


   .. method:: resume_nodes(self, cluster_name: str, nodes: List[str], *args, **kwargs)
      :abstractmethod:


      Resume nodes of an instantiated cluster

      :param cluster_name: Name of the cluster containing the nodes
      :type cluster_name: str
      :param nodes: Name of the cluster nodes to resume
      :type nodes: List[str]
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: None


   .. method:: check_node_alive(self, cluster_name: str, node_name: str, *args, **kwargs)
      :abstractmethod:


      Check if a node of a cluster is reachable

      :param cluster_name: Name of the cluster containing the node
      :type cluster_name: str
      :param node_name: Name of the node in the cluster to check
      :type node_name: str
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: True if the node is reachable and False otherwise
      :rtype: bool


   .. method:: get_default_node_ip(self, cluster_name: str, node_name: str, *args, **kwargs)
      :abstractmethod:


      Get the IP used to connect to the node of a cluster

      :param cluster_name: Name of the cluster containing the node
      :type cluster_name: str
      :param node_name: Name of the node to get the connection IP
      :type node_name: str
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: The connection IP
      :rtype: str


   .. method:: update_node_ips(self, cluster_name: str, node_name: str, *args, **kwargs)
      :abstractmethod:


      Update the node connection IP

      :param cluster_name: Name of the cluster containing the node
      :type cluster_name: str
      :param node_name: Name of the node to update the connection IP
      :type node_name: str
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return:


   .. method:: get_connection_to_node(self, cluster_name: str, node_name: str, *args, **kwargs)
      :abstractmethod:


      Get an SSH client connected to the node. It is used to perform commands in the node

      :param cluster_name: Name of the cluster containing the node
      :type cluster_name: str
      :param node_name: Name of the node to get the SSH client
      :type node_name: str
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: A Paramiko SSH Client connected to node
      :rtype: SSHClient


   .. method:: execute_playbook_in_nodes(self, cluster_name: str, nodes: List[str], playbook_path: str, *args, **kwargs)
      :abstractmethod:


      Execute an Ansible playbook in some nodes

      :param cluster_name: Name of the cluster containing the nodes
      :type cluster_name: str
      :param nodes: Name of the nodes to execute the playbook
      :type nodes: List[str]
      :param playbook_path: Path to the playbook to be executed
      :type playbook_path: str
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword to be passed to the Playbook. Keyword key-values turn Ansible variables
      :return: A dictionary with nodes as keys and their values are booleans indicating if the playbook was successfully executed in the node
      :rtype: Dict[str, bool]



.. py:class:: AbstractInstanceInterface(repository_operator: RepositoryOperations, driver_obj: AbstractClusterDriver)

   Abstract class implementing the interface between the driver and the clap objects.
   The interface is responsible for create and manage clusters and nodes entries in the clap platform repository.
   Clap objects interact with the driver interface instead of the driver directly.

   .. attribute:: __driver_id__
      :annotation: = DriverID

      

   .. method:: create_cluster(self, cluster_template_path: str, *args, **kwargs)
      :abstractmethod:


      Create a cluster based on a given template

      :param cluster_template_path: Path to the cluster's configuration file
      :type cluster_template_path: str
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: Information about the new created cluster
      :rtype: ClusterInfo


   .. method:: stop_cluster(self, cluster_id: str, *args, **kwargs)
      :abstractmethod:


      Stop a cluster based on its cluster id

      :param cluster_id: ID of the cluster to be stopped
      :type cluster_id: str
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: None


   .. method:: start_nodes(self, cluster_id: str, *args, **kwargs)
      :abstractmethod:


      Starts (instantiates) nodes in an instantiated cluster, given its cluster id

      :param cluster_id: ID of the cluster to start nodes
      :type cluster_id: str
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: List of the created nodes
      :rtype: List[NodeInfo]


   .. method:: stop_nodes(self, node_ids: List[str], *args, **kwargs)
      :abstractmethod:


      Stop instantiated node, given its IDs

      :param node_ids: IDs of the nodes to be stopped
      :type node_ids: List[str]
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return:


   .. method:: check_nodes_alive(self, node_ids: List[str], *args, **kwargs)
      :abstractmethod:


      Check if some nodes are reachable

      :param node_ids: ID of the nodes to perform the query
      :type node_ids: List[str]
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: A dictionary with node_id as keys and a boolean values indicating if the node is reachable or not
      :rtype: Dict[str, bool]


   .. method:: get_connection_to_nodes(self, node_ids: List[str], *args, **kwargs)
      :abstractmethod:


      Get SSH client connected to the nodes, used to perform commands.

      :param node_ids: ID of the nodes to get an SSH connection
      :type node_ids: List[str]
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword arguments to be used
      :return: A dictionary with the node_ids as keys and the values are Paramiko SSH Clients, used to perform operation in the node
      :rtype: Dict[str, SSHClient]


   .. method:: execute_playbook_in_nodes(self, node_ids: List[str], playbook_path: str, *args, **kwargs)
      :abstractmethod:


      Execute an Ansible playbook in a set of nodes

      :param node_ids: ID of the nodes to execute the playbook
      :type node_ids: List[str]
      :param playbook_path: Path to the playbook to be executed
      :type playbook_path: str
      :param args: Additional arguments to be used
      :param kwargs: Additional keyword to be passed to the Playbook. Keyword key-values turn Ansible variables
      :return: A dictionary with nodes as keys and their values are booleans indicating if the playbook was successfully executed in the node
      :rtype: Dict[str, bool]



.. py:class:: Codes

   Status codes for modules and nodes
       

   .. attribute:: NODE_STATUS_INIT
      :annotation: = initialized

      

   .. attribute:: NODE_STATUS_UNREACHABLE
      :annotation: = unreachable

      

   .. attribute:: NODE_STATUS_REACHABLE
      :annotation: = reachable

      

   .. attribute:: NODE_STATUS_PAUSED
      :annotation: = paused

      

   .. attribute:: NODE_STATUS_STOPPED
      :annotation: = stopped

      


