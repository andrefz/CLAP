:mod:`clap.modules.spits.repository`
====================================

.. py:module:: clap.modules.spits.repository


Module Contents
---------------

.. py:class:: SpitsControlInfo(*args, **kwargs)

   Bases: :class:`clap.common.repository.AbstractEntry`


.. py:class:: SpitsJobInfo(*args, **kwargs)

   Bases: :class:`clap.common.repository.AbstractEntry`

   .. method:: __repr__(self)




.. py:class:: SpitsProcessInfo(*args, **kwargs)

   Bases: :class:`clap.common.repository.AbstractEntry`

   .. attribute:: SPITS_JM
      :annotation: = jobmanager

      

   .. attribute:: SPITS_TM
      :annotation: = taskmanager

      

   .. method:: __repr__(self)




.. py:class:: SpitsRepositoryOperations(repository_name: str)

   .. method:: create_repository(self)



   .. method:: update_control_info(self, control_info: SpitsControlInfo)



   .. method:: get_control_info(self)



   .. method:: register_installed(self, node_ids: List[str])



   .. method:: check_installed(self, node_ids: List[str])



   .. method:: deregister_installation(self, node_ids: List[str])



   .. method:: save_or_update_job(self, spits_job: SpitsJobInfo)



   .. method:: get_jobs(self, job_ids: List[str] = None)



   .. method:: get_job(self, job_id: str)



   .. method:: remove_job(self, job_id: str)



   .. method:: save_or_update_process(self, process_info: SpitsProcessInfo)



   .. method:: get_processes(self, process_ids: List[str] = None)



   .. method:: get_processes_by_job(self, job_ids: List[str])



   .. method:: get_process(self, process_id: str)



   .. method:: remove_process(self, process_id: str)




