:mod:`clap.modules.group`
=========================

.. py:module:: clap.modules.group


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   commands/index.rst
   module/index.rst


Package Contents
----------------


.. py:class:: AbstractParser

   .. method:: add_parser(self, commands_parser: argparse._SubParsersAction)
      :abstractmethod:




.. data:: log
   

   

.. function:: add_group_to_node(node_ids: List[str], group: str, group_args: Dict[str, str] = None, tags: Dict[str, str] = None, re_add_to_group: bool = True) -> List[str]

   Add nodes to a informed group

   :param node_ids: List of node ids to add the the group.
   :type node_ids: List[str]
   :param group_name: Name of the group which the nodes will be added. If the group has a setup action, the setup action will be executed.
   :type group_name: str
   :param group_args: Key-valued dictionary with the extra arguments to be passed to the setup's action.
   :type group_args: Dict[str, str]
   :param tags: Optionally add nodes that match the tags informed to the group
   :type tags: Dict[str, str]
   :param re_add_to_group: Boolean variable that if is set to true, does not readd node to a group, if the node already belongs to it (Default: True)
   :type re_add_to_group: bool
   :return: A list of nodes that was successfully added to group. A node is sucessfully added to the group if the setup action was sucessfully performed (if any)
   :rtype: List[str] 


.. function:: execute_group_action(node_ids: List[str], group: str, action: str, group_args: Dict[str, str] = None, tags: Dict[str, str] = None) -> List[str]

   Perform a group action to nodes

   :param node_ids: List of node ids to execute the group action.
   :type node_ids: List[str]
   :param group_name: Name of the group which the action will be performed
   :type group_name: str
   :param action: Name of the group's action to be perfomed
   :type action: str 
   :param group_args: Key-valued dictionary with the extra arguments to be passed to the action.
   :type group_args: Dict[str, str]
   :param tags: Optionally execute group's action to nodes that match the tags informed
   :type tags: Dict[str, str]
   :return: A list of nodes that successfully performed the action.
   :rtype: List[str] 


.. function:: list_groups() -> List[Dict[str, Any]]

   Get all CLAP groups

   :return: A List of dictionary with groups information. Each dictionary's element of the list contains:
       - name: The group's name (string)
       - actions: The list of group's actions (list of string)
       - hosts: The list group's host (list of string)
   :rtype: List[Dict[str, Any]]


.. function:: remove_group_from_node(node_ids: List[str], group: str, group_args: Dict[str, str] = None, tags: Dict[str, str] = None)


.. py:class:: GroupsParser

   Bases: :class:`clap.common.module.AbstractParser`

   .. method:: add_parser(self, commands_parser: argparse._SubParsersAction)



   .. method:: command_add_group_to_node(self, namespace: argparse.Namespace)



   .. method:: command_execute_group_action(self, namespace: argparse.Namespace)



   .. method:: command_list_groups(self, namespace: argparse.Namespace)



   .. method:: command_remove_group_from_node(self, namespace: argparse.Namespace)




.. py:class:: PlatformFactory

   Class used to create common CLAP interfaces used
       

   .. attribute:: __multi_instance_api__
      

      

   .. attribute:: __module_iface__
      

      

   .. method:: get_module_interface()
      :staticmethod:


      Get the default ModuleInterface used to pick clap modules

      :return: The modules interface
      :rtype: ModuleInterface


   .. method:: get_instance_api(platform_db: str = Defaults.PLATFORM_REPOSITORY, repository_type: str = Defaults.REPOSITORY_TYPE, default_driver: str = Defaults.DRIVER_ID)
      :staticmethod:


      Get the default MultiInstance API used to manipulate nodes and modules across different drivers

      :return: The MultiInstanceAPI object to manipulate nodes and modules
      :rtype: MultiInstanceAPI



.. py:class:: NodeInfo(**kwargs)

   Bases: :class:`clap.common.repository.AbstractEntry`

   This class holds information about a node that is stored in the CLAP's repository and used by several interfaces
   Each node is unique and is composed by the following elements:
       * node_id: The unique identification of the node, used to perform operations across modules and interfaces
       * cluster_id: ID of the cluster that this node is attached to. The cluster defines a unique login and provider configurations.
       * instance_type: Type of the instantiated node (equivalent to the instances configuration file)
       * creation_time: Date of node's creation
       * update_time: Date of the last node's update
       * ip: IP address used to connect to this node (address used to perform SSH)
       * status: Last known status of the node (see PlatformCodes)
       * tags: Dictionary of tags for node identification. The key is the tag name and the value is a set of tag values
       * groups: Dictionary with groups which the nodes belongs to. The key is the group name and the value is additional group's information.
       * driver_id: ID of the in-use driver that controls this node
       * instance_id: ID of the instance at the cloud provider (cloud's instance id)
       * lifecycle: Instance lifecycle. It can be 'spot' or 'on-demand'
       * extra: Additional instance information

   .. method:: __repr__(self)




.. data:: log
   

   

.. function:: add_group_to_node(node_ids: List[str], group: str, group_args: Dict[str, str] = None, tags: Dict[str, str] = None, re_add_to_group: bool = True) -> List[str]

   Add nodes to a informed group

   :param node_ids: List of node ids to add the the group.
   :type node_ids: List[str]
   :param group_name: Name of the group which the nodes will be added. If the group has a setup action, the setup action will be executed.
   :type group_name: str
   :param group_args: Key-valued dictionary with the extra arguments to be passed to the setup's action.
   :type group_args: Dict[str, str]
   :param tags: Optionally add nodes that match the tags informed to the group
   :type tags: Dict[str, str]
   :param re_add_to_group: Boolean variable that if is set to true, does not readd node to a group, if the node already belongs to it (Default: True)
   :type re_add_to_group: bool
   :return: A list of nodes that was successfully added to group. A node is sucessfully added to the group if the setup action was sucessfully performed (if any)
   :rtype: List[str] 


.. function:: execute_group_action(node_ids: List[str], group: str, action: str, group_args: Dict[str, str] = None, tags: Dict[str, str] = None) -> List[str]

   Perform a group action to nodes

   :param node_ids: List of node ids to execute the group action.
   :type node_ids: List[str]
   :param group_name: Name of the group which the action will be performed
   :type group_name: str
   :param action: Name of the group's action to be perfomed
   :type action: str 
   :param group_args: Key-valued dictionary with the extra arguments to be passed to the action.
   :type group_args: Dict[str, str]
   :param tags: Optionally execute group's action to nodes that match the tags informed
   :type tags: Dict[str, str]
   :return: A list of nodes that successfully performed the action.
   :rtype: List[str] 


.. function:: list_groups() -> List[Dict[str, Any]]

   Get all CLAP groups

   :return: A List of dictionary with groups information. Each dictionary's element of the list contains:
       - name: The group's name (string)
       - actions: The list of group's actions (list of string)
       - hosts: The list group's host (list of string)
   :rtype: List[Dict[str, Any]]


.. function:: remove_group_from_node(node_ids: List[str], group: str, group_args: Dict[str, str] = None, tags: Dict[str, str] = None)


.. data:: __module_name__
   :annotation: = group

   

.. data:: __module_description__
   :annotation: = Group operation in nodes

   

.. data:: __module_dependencies__
   :annotation: = []

   

