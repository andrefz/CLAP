:mod:`clap.modules.tag`
=======================

.. py:module:: clap.modules.tag


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   commands/index.rst
   module/index.rst


Package Contents
----------------


.. py:class:: AbstractParser

   .. method:: add_parser(self, commands_parser: argparse._SubParsersAction)
      :abstractmethod:




.. data:: log
   

   

.. function:: node_add_tag(node_ids: List[str], tags: Dict[str, str]) -> List[str]

   Add tags to nodes

   :param node_ids: List of node ids to add the tags.
   :type node_ids: List[str]
   :param tags: Key-valued dictionary with informing the tags key and value. Each tag may contain a set of value, so if a value a tag with the same key already exists in node, the value will be added to the tag set.
   :type tags: Dict[str, str]
   :return: A list of nodes which the tags were added 
   :rtype: List[str]


.. function:: node_remove_tag(node_ids: List[str], tags: Union[str, Dict[str, str]]) -> List[str]

   Remove a tag value from a node tag set 

   :param node_ids: List of node ids to remove the tags.
   :type node_ids: List[str]
   :param tags: The tags can be a dictionay or a list. If:
     - Tag is a dictionary: Key-valued dictionary with informing the tags key and value. The value will be removed from each tag set. If the tag set contains no value, the node tag will be removed.
     - Tag is a list: List of tags to remove from nodes (all tag values will be removed from the tag set of the node)
   :type tags: Union[str, Dict[str, str]]
   :return: A list of nodes which the tags were removed 
   :rtype: List[str]


.. py:class:: TagsParser

   Bases: :class:`clap.common.module.AbstractParser`

   .. method:: add_parser(self, commands_parser: argparse._SubParsersAction)



   .. method:: command_node_add_tag(self, namespace: argparse.Namespace)



   .. method:: command_node_remove_tag(self, namespace: argparse.Namespace)




.. py:class:: PlatformFactory

   .. attribute:: __multi_instance_api__
      

      

   .. attribute:: __module_iface__
      

      

   .. method:: get_module_interface()
      :staticmethod:


      Get the default ModuleInterface used to pick clap modules

      :return: The modules interface
      :rtype: ModuleInterface


   .. method:: get_instance_api(platform_db: str = Defaults.PLATFORM_REPOSITORY, repository_type: str = Defaults.REPOSITORY_TYPE, default_driver: str = Defaults.DRIVER_ID)
      :staticmethod:


      Get the default MultiInstance API used to manipulate nodes and modules across different drivers

      :return: The MultiInstanceAPI object to manipulate nodes and modules
      :rtype: MultiInstanceAPI



.. py:class:: NodeInfo(**kwargs)

   Bases: :class:`clap.common.repository.AbstractEntry`

   This class holds information about a node that is stored in the CLAP's repository and used by several interfaces
   Each node is unique and is composed by the following elements:
       * node_id: The unique identification of the node, used to perform operations across modules and interfaces
       * cluster_id: ID of the cluster that this node is attached to. The cluster defines a unique login and provider configurations.
       * instance_type: Type of the instantiated node (equivalent to the instances configuration file)
       * creation_time: Date of node's creation
       * update_time: Date of the last node's update
       * ip: IP address used to connect to this node (address used to perform SSH)
       * status: Last known status of the node (see PlatformCodes)
       * tags: Dictionary of tags for node identification. The key is the tag name and the value is a set of tag values
       * groups: Dictionary with groups which the nodes belongs to. The key is the group name and the value is additional group's information.
       * driver_id: ID of the in-use driver that controls this node
       * instance_id: ID of the instance at the cloud provider (cloud's instance id)
       * lifecycle: Instance lifecycle. It can be 'spot' or 'on-demand'
       * extra: Additional instance information

   .. method:: __repr__(self)




.. function:: node_add_tag(node_ids: List[str], tags: Dict[str, str]) -> List[str]

   Add tags to nodes

   :param node_ids: List of node ids to add the tags.
   :type node_ids: List[str]
   :param tags: Key-valued dictionary with informing the tags key and value. Each tag may contain a set of value, so if a value a tag with the same key already exists in node, the value will be added to the tag set.
   :type tags: Dict[str, str]
   :return: A list of nodes which the tags were added 
   :rtype: List[str]


.. function:: node_remove_tag(node_ids: List[str], tags: Union[str, Dict[str, str]]) -> List[str]

   Remove a tag value from a node tag set 

   :param node_ids: List of node ids to remove the tags.
   :type node_ids: List[str]
   :param tags: The tags can be a dictionay or a list. If:
     - Tag is a dictionary: Key-valued dictionary with informing the tags key and value. The value will be removed from each tag set. If the tag set contains no value, the node tag will be removed.
     - Tag is a list: List of tags to remove from nodes (all tag values will be removed from the tag set of the node)
   :type tags: Union[str, Dict[str, str]]
   :return: A list of nodes which the tags were removed 
   :rtype: List[str]


.. data:: __module_name__
   :annotation: = tag

   

.. data:: __module_description__
   :annotation: = Tag nodes

   

.. data:: __module_dependencies__
   :annotation: = []

   

