:mod:`clap.drivers.elasticluster.driver`
========================================

.. py:module:: clap.drivers.elasticluster.driver


Module Contents
---------------

.. py:class:: ConfigReader(config_filepath: str)

   .. method:: _read_config(self)



   .. method:: to_elasticluster_config(self, cluster_name: str)




.. py:class:: ElastiCreator

   .. method:: create_cluster_obj(config_filepath: str, cluster_name: str, storage_path: str = Defaults.elasticluster_storage_path, storage_type: str = 'json')
      :staticmethod:



   .. method:: get_all_cluster_objs(storage_path: str = Defaults.elasticluster_storage_path, storage_type: str = 'json')
      :staticmethod:



   .. method:: get_cluster_obj(cluster_name: str, storage_path: str = Defaults.elasticluster_storage_path, storage_type: str = 'json')
      :staticmethod:



   .. method:: exists_cluster(cluster_name: str, storage_path: str = Defaults.elasticluster_storage_path, storage_type: str = 'json')
      :staticmethod:



   .. method:: get_node_from_cluster(cluster_name: str, node_name: str)
      :staticmethod:



   .. method:: get_nodes_from_cluster(cluster_name: str, nodes: List[str])
      :staticmethod:



   .. method:: get_final_config(eclasticluster_config_file: str)
      :staticmethod:




.. py:class:: ElasticlusterDriver

   Bases: :class:`clap.common.cluster_driver.AbstractClusterDriver`

   .. attribute:: __driver_name__
      :annotation: = Elasticluster Driver

      

   .. attribute:: __driver_id__
      :annotation: = elasticluster

      

   .. attribute:: __driver_version__
      :annotation: = 0.1

      

   .. attribute:: DEFAULT_STORAGE_TYPE
      :annotation: = json

      

   .. method:: get_cluster_obj(self, cluster_name: str)



   .. method:: get_all_clusters(self)



   .. method:: exist_cluster(self, cluster_name: str)



   .. method:: create_cluster(self, cluster_name: str, config_path: str, *args, **kwargs)



   .. method:: remove_cluster(self, cluster_name: str, *args, **kwargs)



   .. method:: stop_cluster(self, cluster_name: str, *args, **kwargs)



   .. method:: get_nodes_from_cluster(self, cluster_name: str, *args, **kwargs)



   .. method:: get_cluster_of_node(self, node_name: str, *args, **kwargs)



   .. method:: start_nodes(self, cluster_name: str, storage_path: str = Defaults.elasticluster_storage_path, max_concurrent_requests: int = 0, *args, **kwargs)



   .. method:: stop_nodes(self, cluster_name: str, nodes: List[str], *args, **kwargs)



   .. method:: pause_nodes(self, cluster_name: str, node_name: str, *args, **kwargs)



   .. method:: resume_nodes(self, cluster_name: str, node_name: str, *args, **kwargs)



   .. method:: check_node_alive(self, cluster_name: str, node_name: str, *args, **kwargs)



   .. method:: get_default_node_ip(self, cluster_name: str, node_name: str, *args, **kwargs)



   .. method:: get_connection_to_node(self, cluster_name: str, node_name: str, *args, **kwargs)



   .. method:: update_node_ips(self, cluster_name: str, node_name: str, *args, **kwargs)



   .. method:: execute_playbook_in_nodes(self, cluster_name: str, nodes: List[str], playbook_path: str, *args, **kwargs)




.. py:class:: AnsibleSetupProviderWrapper(ansible_provider: AnsibleSetupProvider)

   Bases: :class:`elasticluster.providers.ansible_provider.AnsibleSetupProvider`

   .. method:: run_playbook(self, cluster: Cluster, nodes: List[Node], playbook: str, extra_args=tuple())



   .. method:: build_inventory(self, cluster: Cluster, nodes: List[Node])




.. py:class:: ElasticlusterInterface

   Bases: :class:`clap.common.cluster_driver.AbstractInstanceInterface`

   .. attribute:: __driver_id__
      :annotation: = elasticluster

      

   .. method:: create_cluster(self, cluster_template_path: str, *args, **kwargs)



   .. method:: stop_cluster(self, cluster_id: str, *args, **kwargs)



   .. method:: start_nodes(self, cluster_id: str, *args, **kwargs)



   .. method:: stop_nodes(self, node_ids: List[str], *args, **kwargs)



   .. method:: check_nodes_alive(self, node_ids: List[str], *args, **kwargs)



   .. method:: get_connection_to_nodes(self, node_ids: List[str], *args, **kwargs)



   .. method:: execute_playbook_in_nodes(self, node_ids: List[str], playbook_path: str, *args, **kwargs)




