:mod:`clap.drivers.elasticluster.driver`
========================================

.. py:module:: clap.drivers.elasticluster.driver


Module Contents
---------------

.. py:class:: ElasticCreator

   .. method:: create_cluster_obj(cluster_name: str, provider_config: dict, login_config: dict, instances: dict, storage_path: str = Defaults.elasticluster_storage_path, storage_type: str = Defaults.DEFAULT_CONF_TYPE)
      :staticmethod:



   .. method:: update_cluster_config(cluster_name: str, provider_config: dict, login_config: dict, instances: dict, storage_path: str = Defaults.elasticluster_storage_path, storage_type: str = Defaults.DEFAULT_CONF_TYPE)
      :staticmethod:



   .. method:: upddate_cluster_node(cluster: Cluster, node: Node)
      :staticmethod:



   .. method:: __to_elasticluster_config(cluster_name, instances, login_config, provider_config)
      :staticmethod:



   .. method:: get_all_cluster_objs(storage_path: str = Defaults.elasticluster_storage_path, storage_type: str = 'json')
      :staticmethod:



   .. method:: get_cluster_obj(cluster_name: str, storage_path: str = Defaults.elasticluster_storage_path, storage_type: str = 'json')
      :staticmethod:



   .. method:: exists_cluster(cluster_name: str, storage_path: str = Defaults.elasticluster_storage_path, storage_type: str = 'json')
      :staticmethod:



   .. method:: get_node_from_cluster(cluster_name: str, node_name: str)
      :staticmethod:



   .. method:: get_nodes_from_cluster(cluster_name: str, nodes: List[str])
      :staticmethod:



   .. method:: get_final_config(eclasticluster_config_file: str)
      :staticmethod:




.. py:class:: AnsibleSetupProviderWrapper(ansible_provider: AnsibleSetupProvider, kind_groups_map: Dict[str, List[str]], kind_key_value_vars: Dict[str, Dict[str, str]])

   Bases: :class:`elasticluster.providers.ansible_provider.AnsibleSetupProvider`

   .. method:: run_playbook(self, cluster: Cluster, nodes: List[Node], node_name_id_map: Dict[str, str], playbook: str, extra_args=tuple())



   .. method:: build_inventory(self, cluster: Cluster, nodes: List[Node], node_name_id_map: Dict[str, str])




.. function:: elaticluster_start_nodes(cluster_name: str, instances_num: Dict[str, int], storage_path: str = Defaults.elasticluster_storage_path, max_concurrent_requests: int = 0) -> Tuple[Cluster, Set[Node]]


.. function:: elasticluster_check_starting_nodes(cluster: Cluster, node_objs: Set[Node])


.. function:: elasticluster_stop_nodes(cluster_name: str, nodes: List[str], *args, **kwargs) -> None


.. function:: elasticluster_pause_nodes(cluster_name: str, nodes: List[str]) -> None


.. function:: elasticluster_get_connection_to_node(cluster_name: str, node_name: str, *args, **kwargs) -> paramiko.SSHClient


.. py:class:: ElasticlusterInterface(repository_operator: RepositoryOperations)

   Bases: :class:`clap.common.driver.AbstractInstanceInterface`

   .. attribute:: __interface_id__
      :annotation: = elasticluster

      

   .. method:: __get_or_create_cluster(self, cloud_conf: str, login_conf: str)



   .. method:: __stop_cluster(self, cluster_id: str, *args, **kwargs)



   .. method:: start_nodes(self, instances_num: Dict[str, int])



   .. method:: stop_nodes(self, node_ids: List[str])



   .. method:: pause_nodes(self, node_ids: List[str])



   .. method:: resume_nodes(self, node_ids: List[str])
      :abstractmethod:



   .. method:: check_nodes_alive(self, node_ids: List[str])



   .. method:: get_connection_to_nodes(self, node_ids: List[str], *args, **kwargs)



   .. method:: execute_playbook_in_nodes(self, playbook_path: str, group_hosts_map: Dict[str, List[str]], extra_args: Dict[str, str] = None, group_vars: Dict[str, Dict[str, str]] = None)




