:mod:`CLAP.clap.role_manager`
=============================

.. py:module:: CLAP.clap.role_manager


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   CLAP.clap.role_manager.RoleVariableInfo
   CLAP.clap.role_manager.RoleActionInfo
   CLAP.clap.role_manager.Role
   CLAP.clap.role_manager.RoleManager




Attributes
~~~~~~~~~~

.. autoapisummary::

   CLAP.clap.role_manager.logger


.. data:: logger
   

   

.. exception:: RoleError


   Bases: :py:obj:`Exception`

   Common base class for all non-exit exceptions.


.. exception:: InvalidRoleError(role_name: str)


   Bases: :py:obj:`RoleError`

   Common base class for all non-exit exceptions.


.. exception:: InvalidActionError(role_name: str, action_name: str)


   Bases: :py:obj:`RoleError`

   Common base class for all non-exit exceptions.


.. exception:: InvalidHostError(role_name: str, host_name: str)


   Bases: :py:obj:`RoleError`

   Common base class for all non-exit exceptions.


.. exception:: RoleAssignmentError


   Bases: :py:obj:`RoleError`

   Common base class for all non-exit exceptions.


.. exception:: NodeRoleError(node_id: str, role_name: str, host_name: str = None)


   Bases: :py:obj:`RoleError`

   Common base class for all non-exit exceptions.


.. exception:: MissingActionVariableError(role_name: str, action_name: str, var: str)


   Bases: :py:obj:`RoleError`

   Common base class for all non-exit exceptions.


.. class:: RoleVariableInfo

   .. attribute:: name
      :annotation: :str

      

   .. attribute:: description
      :annotation: :Optional[str]

      

   .. attribute:: optional
      :annotation: :Optional[bool]

      


.. class:: RoleActionInfo

   .. attribute:: playbook
      :annotation: :str

      

   .. attribute:: description
      :annotation: :Optional[str]

      

   .. attribute:: vars
      :annotation: :Optional[List[RoleVariableInfo]]

      


.. class:: Role

   .. attribute:: actions
      :annotation: :Optional[Dict[str, RoleActionInfo]]

      

   .. attribute:: hosts
      :annotation: :Optional[List[str]]

      


.. class:: RoleManager(node_repository_controller: clap.node_manager.NodeRepositoryController, role_dir: str, actions_dir: str, private_dir: str, discard_invalids: bool = True, load: bool = True)


   .. method:: get_all_role_nodes(self, role_name: str) -> List[str]


   .. method:: get_role_node_hosts(self, role_name: str, node_id: str) -> List[str]


   .. method:: get_all_role_nodes_hosts(self, role_name: str) -> Dict[str, List[str]]


   .. method:: get_role_nodes(self, role_name: str, from_node_ids: List[str] = None) -> Dict[str, List[str]]


   .. method:: load_roles(self)


   .. method:: add_role(self, role_name: str, hosts_node_map: Union[List[str], Dict[str, List[str]]], host_vars: Dict[str, Dict[str, str]] = None, node_vars: Dict[str, Dict[str, str]] = None, extra_args: Dict[str, str] = None, quiet: bool = False) -> List[str]


   .. method:: _check_nodes_role(self, role_name: str, host_map: Dict[str, List[clap.node.NodeDescriptor]])


   .. method:: perform_action(self, role_name: str, action_name: str, hosts_node_map: Union[List[str], Dict[str, List[str]]], host_vars: Dict[str, Dict[str, str]] = None, node_vars: Dict[str, Dict[str, str]] = None, extra_args: Dict[str, str] = None, quiet: bool = False, validate_nodes_in_role: bool = True) -> clap.executor.AnsiblePlaybookExecutor.PlaybookResult

      :param role_name:
      :param action_name:
      :param hosts_node_map:  If the role does not defines hosts, this value can be:
                              - A list of node_ids, e.g.: [id1, id2]
                              - A dictionary with a empty string key and the value is
                                a list of node_ids, e.g.: {'': [id1, id2]}
                              If the role defines hosts, this value can be:
                              - A dictionary, where key is the host name and the
                                values are lists of node_ids, e.g.
                                { hostA: [id1, id2], hostB: [id2, id3] }
      :param host_vars:
      :param node_vars:
      :param extra_args:
      :param quiet:
      :param validate_nodes_in_role:
      :return:


   .. method:: remove_role(self, role_name: str, hosts_node_map: Union[List[str], Dict[str, List[str]]]) -> List[str]



