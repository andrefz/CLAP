:mod:`CLAP.clap.executor`
=========================

.. py:module:: CLAP.clap.executor


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   CLAP.clap.executor.Executor
   CLAP.clap.executor.SSHCommandExecutor
   CLAP.clap.executor.AnsiblePlaybookExecutor
   CLAP.clap.executor.ShellInvoker




Attributes
~~~~~~~~~~

.. autoapisummary::

   CLAP.clap.executor.logger


.. data:: logger
   

   

.. class:: Executor

   .. method:: run(self) -> Any
      :abstractmethod:



.. class:: SSHCommandExecutor(command: str, nodes: List[clap.node.NodeDescriptor], private_path: str, max_workers: int = 0, connection_timeout: float = 10.0, execution_timeout: float = None, environment: dict = None)


   Bases: :py:obj:`Executor`

   .. method:: connect_and_execute(self, node: clap.node.NodeDescriptor) -> dict


   .. method:: run(self) -> dict



.. class:: AnsiblePlaybookExecutor(playbook_file: str, private_path: str, inventory: Union[list, dict] = None, extra_args: Dict[str, str] = None, env_vars: Dict[str, str] = None, quiet: bool = False, verbosity: int = 0)


   Bases: :py:obj:`Executor`

   .. class:: PlaybookResult

      .. attribute:: ok
         :annotation: :bool

         

      .. attribute:: ret_code
         :annotation: :int

         

      .. attribute:: hosts
         :annotation: :Dict[str, bool]

         

      .. attribute:: events
         :annotation: :Dict[str, List[dict]]

         

      .. attribute:: vars
         :annotation: :Dict[str, Dict[str, Any]]

         


   .. method:: create_inventory(hosts_node_map: Union[List[clap.node.NodeDescriptor], Dict[str, List[clap.node.NodeDescriptor]]], private_path: str, host_vars: Dict[str, Dict[str, str]] = None, node_vars: Dict[str, Dict[str, str]] = None) -> dict
      :staticmethod:


   .. method:: create_extra_vars(output_dir: str, nodes: List[clap.node.NodeDescriptor], private_path: str) -> dict
      :staticmethod:


   .. method:: run(self) -> PlaybookResult



.. class:: ShellInvoker(node: clap.node.NodeDescriptor, private_path: str, verbosity: int = 0, ssh_binary: str = 'ssh')


   Bases: :py:obj:`Executor`

   .. method:: run(self)



