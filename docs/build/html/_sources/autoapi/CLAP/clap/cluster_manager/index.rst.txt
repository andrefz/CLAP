:mod:`CLAP.clap.cluster_manager`
================================

.. py:module:: CLAP.clap.cluster_manager


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   CLAP.clap.cluster_manager.RoleActionType
   CLAP.clap.cluster_manager.CommandActionType
   CLAP.clap.cluster_manager.PlaybookActionType
   CLAP.clap.cluster_manager.RoleAdd
   CLAP.clap.cluster_manager.SetupConfig
   CLAP.clap.cluster_manager.ClusterOptions
   CLAP.clap.cluster_manager._NodeConfig
   CLAP.clap.cluster_manager._ClusterConfig
   CLAP.clap.cluster_manager.ClusterConfigFile
   CLAP.clap.cluster_manager.NodeConfig
   CLAP.clap.cluster_manager.ClusterConfig
   CLAP.clap.cluster_manager.ClusterConfigDatabase
   CLAP.clap.cluster_manager.ClusterDescriptor
   CLAP.clap.cluster_manager.ClusterRepositoryController
   CLAP.clap.cluster_manager.ClusterManager



Functions
~~~~~~~~~

.. autoapisummary::

   CLAP.clap.cluster_manager.validate_valid_role
   CLAP.clap.cluster_manager.validate_valid_cluster



Attributes
~~~~~~~~~~

.. autoapisummary::

   CLAP.clap.cluster_manager.logger
   CLAP.clap.cluster_manager.ActionType


.. data:: logger
   

   

.. exception:: ClusterConfigurationError


   Bases: :py:obj:`Exception`

   Common base class for all non-exit exceptions.


.. exception:: ClusterError


   Bases: :py:obj:`Exception`

   Common base class for all non-exit exceptions.


.. exception:: ClusterSetupError


   Bases: :py:obj:`ClusterError`

   Common base class for all non-exit exceptions.


.. exception:: InvalidClusterError(cluster_id: str)


   Bases: :py:obj:`Exception`

   Common base class for all non-exit exceptions.


.. exception:: InvalidSetupError(cluster_name: str, setup_name: str)


   Bases: :py:obj:`ClusterConfigurationError`

   Common base class for all non-exit exceptions.


.. exception:: NodeSizeError


   Bases: :py:obj:`ClusterConfigurationError`

   Common base class for all non-exit exceptions.


.. class:: RoleActionType

   .. attribute:: role
      :annotation: :str

      

   .. attribute:: action
      :annotation: :str

      

   .. attribute:: extra
      :annotation: :Optional[Dict[str, str]]

      


.. class:: CommandActionType

   .. attribute:: command
      :annotation: :str

      


.. class:: PlaybookActionType

   .. attribute:: playbook
      :annotation: :str

      

   .. attribute:: extra
      :annotation: :Optional[Dict[str, str]]

      


.. data:: ActionType
   

   

.. class:: RoleAdd

   .. attribute:: name
      :annotation: :str

      

   .. attribute:: extra
      :annotation: :Optional[Dict[str, str]]

      


.. class:: SetupConfig

   .. attribute:: roles
      :annotation: :Optional[List[RoleAdd]]

      

   .. attribute:: actions
      :annotation: :Optional[List[ActionType]]

      


.. class:: ClusterOptions

   .. attribute:: ssh_to
      :annotation: :Optional[str]

      


.. class:: _NodeConfig

   .. attribute:: type
      :annotation: :str

      

   .. attribute:: count
      :annotation: :int

      

   .. attribute:: min_count
      :annotation: :Optional[int]

      

   .. attribute:: setups
      :annotation: :List[str]

      


.. class:: _ClusterConfig

   .. attribute:: options
      :annotation: :Optional[ClusterOptions]

      

   .. attribute:: before_all
      :annotation: :Optional[List[str]]

      

   .. attribute:: before
      :annotation: :Optional[List[str]]

      

   .. attribute:: after_all
      :annotation: :Optional[List[str]]

      

   .. attribute:: after
      :annotation: :Optional[List[str]]

      

   .. attribute:: nodes
      :annotation: :Optional[Dict[str, _NodeConfig]]

      


.. class:: ClusterConfigFile

   .. attribute:: setups
      :annotation: :Optional[Dict[str, SetupConfig]]

      

   .. attribute:: clusters
      :annotation: :Optional[Dict[str, _ClusterConfig]]

      


.. class:: NodeConfig

   .. attribute:: type
      :annotation: :str

      

   .. attribute:: count
      :annotation: :int

      

   .. attribute:: min_count
      :annotation: :Optional[int]

      

   .. attribute:: setups
      :annotation: :List[SetupConfig]

      


.. class:: ClusterConfig

   .. attribute:: cluster_config_id
      :annotation: :str

      

   .. attribute:: options
      :annotation: :Optional[ClusterOptions]

      

   .. attribute:: before_all
      :annotation: :Optional[List[SetupConfig]]

      

   .. attribute:: before
      :annotation: :Optional[List[SetupConfig]]

      

   .. attribute:: after_all
      :annotation: :Optional[List[SetupConfig]]

      

   .. attribute:: after
      :annotation: :Optional[List[SetupConfig]]

      

   .. attribute:: nodes
      :annotation: :Optional[Dict[str, NodeConfig]]

      


.. function:: validate_valid_role()


.. function:: validate_valid_cluster()


.. class:: ClusterConfigDatabase(cluster_files: List[str], discard_invalids: bool = True, load: bool = True)


   .. method:: _load_cluster_and_setups(self)


   .. method:: load(self)



.. class:: ClusterDescriptor

   .. attribute:: cluster_id
      :annotation: :str

      

   .. attribute:: cluster_name
      :annotation: :str

      

   .. attribute:: cluster_config
      :annotation: :ClusterConfig

      

   .. attribute:: creation_time
      :annotation: :float

      

   .. attribute:: update_time
      :annotation: :float

      

   .. attribute:: is_setup
      :annotation: :bool = False

      


.. class:: ClusterRepositoryController(repository: clap.repository.Repository)


   .. method:: upsert_cluster(self, cluster: ClusterDescriptor)


   .. method:: remove_cluster(self, cluster_id: str)


   .. method:: get_cluster_by_id(self, cluster_id: str) -> ClusterDescriptor


   .. method:: get_all_clusters(self) -> List[ClusterDescriptor]



.. class:: ClusterManager(node_manager: clap.node_manager.NodeManager, role_manager: clap.role_manager.RoleManager, config_db: clap.configs.ConfigurationDatabase, cluster_repository_controller: ClusterRepositoryController, private_dir: str, cluster_tag_prefix: str = '.cluster:')


   .. method:: add_cluster_tag(self, node_ids: List[str], cluster_id: str, node_type: str) -> List[str]


   .. method:: get_all_cluster_nodes(self, cluster_id: str) -> List[str]


   .. method:: get_cluster_nodes_types(self, cluster_id: str) -> Dict[str, List[str]]


   .. method:: get_cluster_by_id(self, cluster_id: str) -> ClusterDescriptor


   .. method:: get_all_clusters(self) -> List[ClusterDescriptor]


   .. method:: grow(self, cluster_id: str, node_type: str, count: int = 1, min_count: int = 0, start_timeout: int = 600)


   .. method:: start_cluster_node(self, cluster_id: str, node_type: str, instance_info: clap.configs.InstanceInfo, count: int, start_timeout: int = 600) -> List[str]


   .. method:: start_cluster(self, cluster_config: ClusterConfig, start_timeout: int = 600, max_workers: int = 1, destroy_on_min_count: bool = True) -> str


   .. method:: add_existing_nodes_to_cluster(self, cluster_id: str, node_types: Dict[str, List[str]], max_workers: int = 1)


   .. method:: run_action(self, action: ActionType, node_ids: List[str]) -> bool


   .. method:: run_role_add(self, role: RoleAdd, node_ids: List[str]) -> bool


   .. method:: run_setup(self, setup: SetupConfig, node_ids: List[str]) -> bool


   .. method:: _run_setup_list(self, setups: List[SetupConfig], node_ids: List[str]) -> bool


   .. method:: setup_cluster(self, cluster_id: str, nodes_being_added: Dict[str, List[str]] = None, max_workers: int = 1, start_at_stage: str = 'before_all')


   .. method:: pause_cluster(self, cluster_id: str, timeout: int = 180, max_workers: int = 1) -> List[str]


   .. method:: resume_cluster(self, cluster_id: str, timeout: int = 180, max_workers: int = 1) -> List[str]


   .. method:: stop_cluster(self, cluster_id: str, timeout: int = 180, max_workers: int = 1, remove_cluster: bool = True) -> List[str]


   .. method:: is_alive(self, cluster_id: str, retries: int = 5, wait_timeout: int = 30, update_timeout: int = 30, max_workers: int = 1, test_command: str = 'echo "OK"') -> Dict[str, bool]


   .. method:: upsert_cluster(self, cluster: ClusterDescriptor)



