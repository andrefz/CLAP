:mod:`CLAP.clap.repository`
===========================

.. py:module:: CLAP.clap.repository


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   CLAP.clap.repository.Repository
   CLAP.clap.repository.SQLiteRepository
   CLAP.clap.repository.RepositoryFactory




.. exception:: RepositoryError


   Bases: :py:obj:`Exception`

   Common base class for all non-exit exceptions.


.. exception:: InvalidEntryError(entry)


   Bases: :py:obj:`RepositoryError`

   Common base class for all non-exit exceptions.


.. class:: Repository(repository_path: str, commit_on_close: bool = True, verbosity: int = 0)


   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. attribute:: repository_name
      :annotation: :str = AbstractRepository

      

   .. attribute:: extension
      :annotation: :str = 

      

   .. method:: connect(self, table_name: str) -> Repository
      :abstractmethod:


   .. method:: open(self, table_name: str)
      :abstractmethod:


   .. method:: close(self)
      :abstractmethod:


   .. method:: commit(self)
      :abstractmethod:


   .. method:: keys(self) -> List[str]
      :abstractmethod:


   .. method:: upsert(self, key: str, obj: dict)
      :abstractmethod:


   .. method:: update(self, key: str, update_obj: dict)
      :abstractmethod:


   .. method:: get(self, key: str) -> Dict[str, dict]
      :abstractmethod:


   .. method:: get_multiple(self, key: List[str]) -> dict
      :abstractmethod:


   .. method:: get_all(self) -> Dict[str, dict]
      :abstractmethod:


   .. method:: remove(self, key: str)
      :abstractmethod:


   .. method:: remove_multiple(self, keys: List[str])
      :abstractmethod:


   .. method:: clear(self)
      :abstractmethod:



.. class:: SQLiteRepository(repository_path: str, commit_on_close: bool = True, verbosity: int = 0)


   Bases: :py:obj:`Repository`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. attribute:: repository_name
      :annotation: :str = sqlite

      

   .. attribute:: extension
      :annotation: :str = .db

      

   .. method:: connect(self, table_name: str) -> SQLiteRepository


   .. method:: open(self, table_name: str)


   .. method:: close(self)


   .. method:: commit(self)


   .. method:: keys(self) -> List[str]


   .. method:: update(self, key: str, update_obj: dict)


   .. method:: upsert(self, key: str, obj: dict)


   .. method:: get(self, key: str) -> dict


   .. method:: get_multiple(self, keys: List[str]) -> Dict[str, dict]


   .. method:: get_all(self) -> Dict[str, dict]


   .. method:: remove(self, key: str)


   .. method:: remove_multiple(self, keys: List[str])


   .. method:: clear(self)


   .. method:: __repr__(self)

      Return repr(self).



.. class:: RepositoryFactory

   .. attribute:: repositories
      

      

   .. method:: get_repository(self, name: str, repository_path: str, commit_on_close: bool = True, verbosity: int = 0) -> Repository



