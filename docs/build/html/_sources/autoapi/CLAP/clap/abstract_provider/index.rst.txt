:mod:`CLAP.clap.abstract_provider`
==================================

.. py:module:: CLAP.clap.abstract_provider


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   CLAP.clap.abstract_provider.AbstractInstanceProvider




Attributes
~~~~~~~~~~

.. autoapisummary::

   CLAP.clap.abstract_provider.logger


.. data:: logger
   

   

.. exception:: InstanceDeploymentError


   Bases: :py:obj:`Exception`

   Common base class for all non-exit exceptions.


.. class:: AbstractInstanceProvider

   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. method:: start_instances(self, instance: clap.configs.InstanceInfo, count: int, timeout: int = 600) -> List[clap.node.NodeDescriptor]
      :abstractmethod:


   .. method:: stop_instances(self, nodes_to_stop: List[clap.node.NodeDescriptor], timeout: int = 600) -> List[clap.node.NodeDescriptor]
      :abstractmethod:


   .. method:: pause_instances(self, nodes_to_pause: List[clap.node.NodeDescriptor], timeout: int = 600) -> List[clap.node.NodeDescriptor]
      :abstractmethod:


   .. method:: resume_instances(self, nodes_to_resume: List[clap.node.NodeDescriptor], timeout: int = 600) -> List[clap.node.NodeDescriptor]
      :abstractmethod:


   .. method:: update_instance_info(self, nodes_to_check: List[clap.node.NodeDescriptor], timeout: int = 600) -> List[clap.node.NodeDescriptor]
      :abstractmethod:



